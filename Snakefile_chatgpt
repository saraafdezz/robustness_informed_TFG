configfile: "config.yaml"

SEED_MAX = config.get("seed_max", 50)
FRACS = config.get("fracs", [0.1, 0.2, 0.5, 1.0])  # Fracciones para `ivae_random`
N_GPU = config.get("n_gpu", 1)
N_CPU = config.get("n_cpu", 1)

rule all:
    input:
        expand("path/{model_kind}/seed_{seed}/done.txt",
               model_kind=config["models"].values(),
               seed=range(SEED_MAX + 1)),
        "path/done_scoring.txt"

rule install_ivae:
    output:
        "path/install_done.txt"
    shell:
        """
        pixi install
        echo "Installation completed" > {output}
        """

rule train_model_kegg:
    input:
        "notebooks/00-train-copy.py",
        "path/install_done.txt"
    output:
        "path/ivae_kegg/seed_{seed}/done.txt"
    params:
        model_kind="ivae_kegg",
        seed=lambda wildcards: wildcards.seed
    shell:
        """
        pixi run --environment cuda python {input} --model_kind {params.model_kind} --seed {params.seed}
        echo "Training completed for seed {params.seed} and model {params.model_kind}" > {output}
        """

rule train_model_reactome:
    input:
        "notebooks/00-train-copy.py",
        "path/install_done.txt"
    output:
        "path/ivae_reactome/seed_{seed}/done.txt"
    params:
        model_kind="ivae_reactome",
        seed=lambda wildcards: wildcards.seed
    shell:
        """
        pixi run --environment cuda python {input} --model_kind {params.model_kind} --seed {params.seed}
        echo "Training completed for seed {params.seed} and model {params.model_kind}" > {output}
        """

rule train_model_random:
    input:
        "notebooks/00-train-copy.py",
        "path/install_done.txt"
    output:
        "path/ivae_random-{frac}/seed_{seed}/done.txt"
    params:
        frac=lambda wildcards: wildcards.frac,
        seed=lambda wildcards: wildcards.seed
    shell:
        """
        pixi run --environment cuda python {input} --model_kind ivae_random-{params.frac} --frac {params.frac} --seed {params.seed}
        echo "Training completed for seed {params.seed} and frac {params.frac}" > {output}
        """

rule scoring_kegg:
    input:
        expand("path/ivae_kegg/seed_{seed}/done.txt", seed=range(SEED_MAX + 1))
    output:
        "path/ivae_kegg/scoring_done.txt"
    shell:
        """
        pixi run --environment cuda papermill notebooks/01-compute_scores.ipynb -p model_kind ivae_kegg
        echo "Scoring completed for ivae_kegg" > {output}
        """

rule scoring_reactome:
    input:
        expand("path/ivae_reactome/seed_{seed}/done.txt", seed=range(SEED_MAX + 1))
    output:
        "path/ivae_reactome/scoring_done.txt"
    shell:
        """
        pixi run --environment cuda papermill notebooks/01-compute_scores.ipynb -p model_kind ivae_reactome
        echo "Scoring completed for ivae_reactome" > {output}
        """

rule scoring_random:
    input:
        expand("path/ivae_random-{frac}/seed_{seed}/done.txt",
               frac=FRACS,
               seed=range(SEED_MAX + 1))
    output:
        expand("path/ivae_random-{frac}/scoring_done.txt", frac=FRACS)
    shell:
        """
        for frac in {FRACS}; do
            pixi run --environment cuda papermill notebooks/01-compute_scores.ipynb -p model_kind ivae_random-$frac -p frac $frac
            echo "Scoring completed for ivae_random-$frac" > path/ivae_random-$frac/scoring_done.txt
        done
        """

rule combine_models:
    input:
        "path/ivae_kegg/scoring_done.txt",
        "path/ivae_reactome/scoring_done.txt",
        expand("path/ivae_random-{frac}/scoring_done.txt", frac=FRACS)
    output:
        "path/done_scoring.txt"
    shell:
        """
        echo "Model training and scoring completed" > {output}
        """

